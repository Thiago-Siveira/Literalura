package com.alura.literalura.principal;

import com.alura.literalura.DTO.Datos;
import com.alura.literalura.DTO.DatosAutor;
import com.alura.literalura.DTO.DatosLibros;
import com.alura.literalura.model.Autor;
import com.alura.literalura.model.Libro;
import com.alura.literalura.repository.AutorRepository;
import com.alura.literalura.repository.LibroRepository;
import com.alura.literalura.service.ConsumoAPI;
import com.alura.literalura.service.ConvierteDatos;
import java.io.PrintStream;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.Scanner;
import java.util.stream.Stream;
import org.springframework.beans.factory.annotation.Autowired;

public class Principal {
    @Autowired
    private final LibroRepository libroRepository;
    @Autowired
    private final AutorRepository autorRepository;
    private static final String URL_BASE = "https://gutendex.com/books/";
    private ConsumoAPI consumoAPI = new ConsumoAPI();
    private ConvierteDatos conversor = new ConvierteDatos();
    private Scanner teclado;
    private String json;
    private List<Autor> autores;
    private List<Libro> libros;
    private String menu;

    public Principal(LibroRepository libroRepository, AutorRepository autorRepository) {
        this.teclado = new Scanner(System.in);
        this.menu = "------------\nElija la opción a través de su número:\n1 - buscar libro por título\n2 - listar libros registrados\n3 - listar autores registrados\n4 - listar autores vivos en determinado año\n5 - listar libros por idioma\n0 - salir\n";
        this.libroRepository = libroRepository;
        this.autorRepository = autorRepository;
    }

    public void muestraElMenu() {
        int opcionElegida = -1;

        while(opcionElegida != 0) {
            this.json = this.consumoAPI.obtenerDatos("https://gutendex.com/books/");
            System.out.println(this.menu);
            opcionElegida = this.teclado.nextInt();
            this.teclado.nextLine();
            switch (opcionElegida) {
                case 0:
                    System.out.println("Hasta luego...");
                    break;
                case 1:
                    this.buscarLibroPorTitulo();
                    break;
                case 2:
                    this.mostrarLibrosBuscados();
                    break;
                case 3:
                    this.mostrarAutoresBuscados();
                    break;
                case 4:
                    this.buscarAutoresVivos();
                    break;
                case 5:
                    this.buscarLibrosPorIdioma();
                    break;
                default:
                    System.out.println("Opción inválida");
            }
        }

    }

    public void buscarLibroPorTitulo() {
        DatosLibros datosLibro = this.recibirDatosDelLibro();
        if (datosLibro != null) {
            DatosAutor datosAutor = (DatosAutor)datosLibro.autor().get(0);
            Autor autorExistente = this.autorRepository.findByNombre(datosAutor.nombre());
            Libro libro;
            if (autorExistente != null) {
                libro = new Libro(datosLibro, autorExistente);
            } else {
                Autor nuevoAutor = new Autor(datosAutor);
                libro = new Libro(datosLibro, nuevoAutor);
                this.autorRepository.save(nuevoAutor);
            }

            try {
                this.libroRepository.save(libro);
                System.out.println(libro);
            } catch (Exception var6) {
                System.out.println("No puedes registrar un mismo libro más de una vez");
            }
        } else {
            System.out.println("No hemos encontrado el libro en la API =(");
        }

    }

    private DatosLibros recibirDatosDelLibro() {
        System.out.println("Ingrese el título del libro");
        String nombreLibro = this.teclado.nextLine();
        this.json = this.consumoAPI.obtenerDatos("https://gutendex.com/books/?search=" + nombreLibro.replace(" ", "+"));
        Datos datosBusqueda = (Datos)this.conversor.obtenerDatos(this.json, Datos.class);
        Optional<DatosLibros> libroBuscado = datosBusqueda.resultados().stream().filter((libro) -> libro.titulo().toUpperCase().contains(nombreLibro.toUpperCase())).findFirst();
        return libroBuscado.isPresent() ? (DatosLibros)libroBuscado.get() : null;
    }

    private void mostrarLibrosBuscados() {
        this.libros = this.libroRepository.findAll();
        Stream var10000 = this.libros.stream().sorted(Comparator.comparing(Libro::getIdioma));
        PrintStream var10001 = System.out;
        Objects.requireNonNull(var10001);
        var10000.forEach(var10001::println);
    }

    private void mostrarAutoresBuscados() {
        this.autores = this.autorRepository.findAll();
        Stream var10000 = this.autores.stream().sorted(Comparator.comparing(Autor::getFechaDeFallecimiento));
        PrintStream var10001 = System.out;
        Objects.requireNonNull(var10001);
        var10000.forEach(var10001::println);
    }

    private void buscarLibrosPorIdioma() {
        System.out.println("Ingrese el idioma para buscar los libros:\nes- español\nen- inglés\nfr- francés\npt- portugués");
        String idioma = this.teclado.nextLine();
        List<Libro> librosPorIdioma = this.libroRepository.findByIdioma(idioma);
        PrintStream var10001 = System.out;
        Objects.requireNonNull(var10001);
        librosPorIdioma.forEach(var10001::println);
    }

    private void buscarAutoresVivos() {
        System.out.println("Ingrese el año vivo de auto(es) que desea buscar");
        int anio = Integer.valueOf(this.teclado.nextLine());
        List<Autor> autoresVivos = this.autorRepository.findByFechaDeNacimientoLessThanEqualAndFechaDeFallecimientoGreaterThanEqual(anio, anio);
        PrintStream var10001 = System.out;
        Objects.requireNonNull(var10001);
        autoresVivos.forEach(var10001::println);
    }
}
